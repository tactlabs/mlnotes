<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TactLabs</title>
    <link>https://tactlabs.github.io/mlnotes/</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
        <atom:link href="https://tactlabs.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Find-all</title>
      <link>https://tactlabs.github.io/mlnotes/regex/find-all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/regex/find-all/</guid>
      <description>content = &amp;#34;&amp;#34;&amp;#34;OSPF Process 1 with Router ID 1.1.1.1 Area: 0.0.0.11 Link State Database Router test Maintenance &amp;#34;&amp;#34;&amp;#34;content &#39;OSPF Process 1 with Router ID 1.1.1.1\n Area: 0.0.0.11\n Link State Database \n Router test \n Maintenance\n&#39;  import re regex = &amp;#34;OSPF|Area|Link&amp;#34; lines = content.split(&amp;#34;\n&amp;#34;) print(lines) [&#39;OSPF Process 1 with Router ID 1.1.1.1&#39;, &#39; Area: 0.0.0.11&#39;, &#39; Link State Database &#39;, &#39; Router test &#39;, &#39; Maintenance&#39;, &#39;&#39;]  for line in lines: print(line)  OSPF Process 1 with Router ID 1.</description>
    </item>
    
    <item>
      <title>Ontario-postal-code</title>
      <link>https://tactlabs.github.io/mlnotes/regex/ontario-postal-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/regex/ontario-postal-code/</guid>
      <description>import renames = [&amp;#39;M2N1H5&amp;#39;, &amp;#39;M2N 1H5&amp;#39;, &amp;#39;M882J8&amp;#39;] regex_patten = &amp;#34;^[A-Z]\d[A-Z]\s*\d[A-Z]\d&amp;#34; # starts with Capital letter; it can have zero or one space for name in names: m = re.match(regex_patten, name) if(m): #print(m.groups()) print(&amp;#39;matched : &amp;#39;, name) matched : M2N1H5 matched : M2N 1H5  # \d - digit # \D - non-digit # \s - whitespace # \S - non-whitespace # \w - alphanumeric # \W - non-alphanumeric</description>
    </item>
    
    <item>
      <title>Untitled</title>
      <link>https://tactlabs.github.io/mlnotes/regex/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/regex/untitled/</guid>
      <description>content = &amp;#34;&amp;#34;&amp;#34;OSPF Process 1 with Router ID 1.1.1.1 Area: 0.0.0.11 Link State Database Router test Maintenance &amp;#34;&amp;#34;&amp;#34;content &#39;OSPF Process 1 with Router ID 1.1.1.1\n Area: 0.0.0.11\n Link State Database \n Router test \n Maintenance\n&#39;  import re regex = &amp;#34;OSPF|Area|Link&amp;#34; lines = content.split(&amp;#34;\n&amp;#34;) print(lines) [&#39;OSPF Process 1 with Router ID 1.1.1.1&#39;, &#39; Area: 0.0.0.11&#39;, &#39; Link State Database &#39;, &#39; Router test &#39;, &#39; Maintenance&#39;, &#39;&#39;]  for line in lines: print(line)  OSPF Process 1 with Router ID 1.</description>
    </item>
    
    <item>
      <title>abc</title>
      <link>https://tactlabs.github.io/mlnotes/deep-learning/basic/abc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/deep-learning/basic/abc/</guid>
      <description>print(&amp;#34;abc&amp;#34;)</description>
    </item>
    
    <item>
      <title>accuracy-score</title>
      <link>https://tactlabs.github.io/mlnotes/sklearn/accuracy-score/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/sklearn/accuracy-score/</guid>
      <description>import numpy as np from sklearn.metrics import accuracy_scorey_pred = [0, 2, 1, 3] y_true = [0, 1, 2, 3] score1 = accuracy_score(y_true, y_pred) print(score1) 0.5  score2 = accuracy_score(y_true, y_pred, normalize=False) print(score2) 2  </description>
    </item>
    
    <item>
      <title>add-a-new-column</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/add-a-new-column/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/add-a-new-column/</guid>
      <description>import pandas as pddata = { &amp;#39;city&amp;#39; : [&amp;#39;Toronto&amp;#39;, &amp;#39;Montreal&amp;#39;, &amp;#39;Waterloo&amp;#39;], &amp;#39;points&amp;#39; : [80, 70, 90] }data {&#39;city&#39;: [&#39;Toronto&#39;, &#39;Montreal&#39;, &#39;Waterloo&#39;], &#39;points&#39;: [80, 70, 90]}  type(data) dict  df = pd.DataFrame(data)df = df.assign(code = [1, 2, 3])df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    city points code     0 Toronto 80 1   1 Montreal 70 2   2 Waterloo 90 3     </description>
    </item>
    
    <item>
      <title>add-padding-around-string</title>
      <link>https://tactlabs.github.io/mlnotes/python/basics/add-padding-around-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/python/basics/add-padding-around-string/</guid>
      <description>text = &amp;#39;Chapter 2&amp;#39; Add Padding Around Text
# Add Spaces Of Padding To The Left format(text, &amp;#39;&amp;gt;20&amp;#39;) &#39; Chapter 2&#39;  # Add Spaces Of Padding To The Right format(text, &amp;#39;&amp;lt;20&amp;#39;) &#39;Chapter 2 &#39;  # Add Spaces Of Padding On Each Side format(text, &amp;#39;^20&amp;#39;) &#39; Chapter 2 &#39;  # Add * Of Padding On Each Side format(text, &amp;#39;*^20&amp;#39;) &#39;*****Chapter 2******&#39;  </description>
    </item>
    
    <item>
      <title>advanced-custom-lambda</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/advanced-custom-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/advanced-custom-lambda/</guid>
      <description>import numpy as np import pandas as pd# Check the student passed either math or passed at least in 2 subjects. If no condidition matched, consider them as failed def pass_math_or_two_subjects(row): if(row.maths &amp;gt; 34): return &amp;#39;Pass&amp;#39; if(row.language &amp;gt; 34 and row.science &amp;gt; 34): return &amp;#39;Pass&amp;#39; return &amp;#39;Fail&amp;#39;df = pd.read_csv(&amp;#39;abc.csv&amp;#39;)df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     df[&amp;#39;special_result&amp;#39;] = df.</description>
    </item>
    
    <item>
      <title>age-calculator</title>
      <link>https://tactlabs.github.io/mlnotes/python/basics/age-calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/python/basics/age-calculator/</guid>
      <description>from datetime import datetimedef get_age(d): d1 = datetime.now() months = (d1.year - d.year) * 12 + d1.month - d.month year = int(months / 12) return yearage = get_age(datetime(1991, 1, 1))age 31  </description>
    </item>
    
    <item>
      <title>apply-custom-function</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/apply-custom-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/apply-custom-function/</guid>
      <description>import pandas as pddata = { &amp;#39;city&amp;#39; : [&amp;#39;Toronto&amp;#39;, &amp;#39;Montreal&amp;#39;, &amp;#39;Waterloo&amp;#39;], &amp;#39;points&amp;#39; : [80, 70, 90] }data {&#39;city&#39;: [&#39;Toronto&#39;, &#39;Montreal&#39;, &#39;Waterloo&#39;], &#39;points&#39;: [80, 70, 90]}  type(data) dict  df = pd.DataFrame(data)df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    city points     0 Toronto 80   1 Montreal 70   2 Waterloo 90     def get_bonus(x): if (x &amp;gt; 75): return x + 10 return xdf[&amp;#39;new_points&amp;#39;] = df[&amp;#39;points&amp;#39;].</description>
    </item>
    
    <item>
      <title>apply-function</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/apply-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/apply-function/</guid>
      <description>import pandas as pddata = { &amp;#39;city&amp;#39; : [&amp;#39;Toronto&amp;#39;, &amp;#39;Montreal&amp;#39;, &amp;#39;Waterloo&amp;#39;, &amp;#39;Toronto&amp;#39;, &amp;#39;Waterloo&amp;#39;, &amp;#39;Toronto&amp;#39;, &amp;#39;Toronto&amp;#39;], &amp;#39;points&amp;#39; : [80, 70, 90, 85, 79, 82, 200] }data {&#39;city&#39;: [&#39;Toronto&#39;, &#39;Montreal&#39;, &#39;Waterloo&#39;, &#39;Toronto&#39;, &#39;Waterloo&#39;, &#39;Toronto&#39;, &#39;Toronto&#39;], &#39;points&#39;: [80, 70, 90, 85, 79, 82, 200]}  type(data) dict  df = pd.DataFrame(data)df.groupby(&amp;#39;city&amp;#39;)[&amp;#39;points&amp;#39;].apply(lambda x:x.rolling(window=1).mean()) 0 80.0 1 70.0 2 90.0 3 85.0 4 79.0 5 82.0 6 200.0 Name: points, dtype: float64  df.groupby(&amp;#39;city&amp;#39;)[&amp;#39;points&amp;#39;].apply(lambda x:x.rolling(window=2).mean()) 0 NaN 1 NaN 2 NaN 3 82.</description>
    </item>
    
    <item>
      <title>basic</title>
      <link>https://tactlabs.github.io/mlnotes/python/basic/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/python/basic/basic/</guid>
      <description>print(&amp;#34;basic&amp;#34;) Failed to start the Kernel. Kernel tar (Python 3.10.0) is not usable. Check the Jupyter output tab for more information. View Jupyter &amp;lt;a href=&#39;command:jupyter.viewOutput&#39;&amp;gt;log&amp;lt;/a&amp;gt; for further details.  </description>
    </item>
    
    <item>
      <title>classification</title>
      <link>https://tactlabs.github.io/mlnotes/machine-learning/classification/classification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/machine-learning/classification/classification/</guid>
      <description>print(&amp;#34;classification&amp;#34;)</description>
    </item>
    
    <item>
      <title>compile-expression</title>
      <link>https://tactlabs.github.io/mlnotes/regex/compile-expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/regex/compile-expression/</guid>
      <description>import re# precompile regex patterns regex_entries = [ re.compile(p) for p in [&amp;#39;awesome&amp;#39;, &amp;#39;ocean&amp;#39;] ]content = &amp;#39;Duckduck go is awesome and it is getting better everyday&amp;#39; print(&amp;#39;Text : {!r}&amp;#39;.format(content)) Text : &#39;Duckduck go is awesome and it is getting better everyday&#39;  for regex in regex_entries: print(&amp;#39;Finding {} -&amp;gt; &amp;#39;.format(regex.pattern), end = &amp;#39; &amp;#39;) if(regex.search(content)): print(&amp;#39;matched&amp;#39;) else: print(&amp;#39;not matched&amp;#39;) Finding awesome -&amp;gt; matched Finding ocean -&amp;gt; not matched  </description>
    </item>
    
    <item>
      <title>decision-tree-graph</title>
      <link>https://tactlabs.github.io/mlnotes/sklearn/decision-tree-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/sklearn/decision-tree-graph/</guid>
      <description>import pydotplus from sklearn.datasets import load_iris from sklearn import tree import collections# Data Collection #heigh, length of hair, voice pitch X = [ [180, 15,0], [177, 42,0], [136, 35,1], [174, 65,0], [141, 28,1]]Y = [&amp;#39;man&amp;#39;, &amp;#39;woman&amp;#39;, &amp;#39;woman&amp;#39;, &amp;#39;man&amp;#39;, &amp;#39;woman&amp;#39;] data_feature_names = [ &amp;#39;height&amp;#39;, &amp;#39;hair length&amp;#39;, &amp;#39;voice pitch&amp;#39; ]print(data_feature_names) [&#39;height&#39;, &#39;hair length&#39;, &#39;voice pitch&#39;]  # Training clf = tree.DecisionTreeClassifier() clf = clf.fit(X,Y)# Visualize data dot_data = tree.export_graphviz(clf, feature_names=data_feature_names, out_file=None, filled=True, rounded=True) graph = pydotplus.</description>
    </item>
    
    <item>
      <title>gaussian</title>
      <link>https://tactlabs.github.io/mlnotes/sklearn/gaussian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/sklearn/gaussian/</guid>
      <description>from sklearn.naive_bayes import GaussianNB import numpy as np#assigning predictor and target variables x= np.array([[-3,7],[1,5], [1,2], [-2,0], [2,3], [-4,0], [-1,1], [1,1], [-2,2], [2,7], [-4,1], [-2,7]]) y = np.array([3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 4, 4])#Create a Gaussian Classifier model = GaussianNB()# Train the model using the training sets  model.fit(x, y) GaussianNB()  #Predict Output  predicted= model.predict([[1,2],[3,4]]) print(predicted) [3 4]  </description>
    </item>
    
    <item>
      <title>gaussian-breast-cancer-prediction</title>
      <link>https://tactlabs.github.io/mlnotes/sklearn/gaussian-breast-cancer-prediction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/sklearn/gaussian-breast-cancer-prediction/</guid>
      <description>from sklearn.datasets import load_breast_cancer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB from sklearn.metrics import accuracy_score# Load dataset data = load_breast_cancer()type(data) sklearn.utils.Bunch  # Organize our data label_names = data[&amp;#39;target_names&amp;#39;] labels = data[&amp;#39;target&amp;#39;] feature_names = data[&amp;#39;feature_names&amp;#39;] features = data[&amp;#39;data&amp;#39;]features array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2.654e-01, 4.601e-01, 1.189e-01], [2.057e+01, 1.777e+01, 1.329e+02, ..., 1.860e-01, 2.750e-01, 8.902e-02], [1.969e+01, 2.125e+01, 1.300e+02, ..., 2.430e-01, 3.613e-01, 8.758e-02], ..., [1.660e+01, 2.808e+01, 1.083e+02, ..., 1.418e-01, 2.218e-01, 7.820e-02], [2.060e+01, 2.933e+01, 1.</description>
    </item>
    
    <item>
      <title>linear-model</title>
      <link>https://tactlabs.github.io/mlnotes/machine-learning/classification/linear-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/machine-learning/classification/linear-model/</guid>
      <description>print(&amp;#34;linear-model.&amp;#34;)</description>
    </item>
    
    <item>
      <title>regression</title>
      <link>https://tactlabs.github.io/mlnotes/machine-learning/regression/regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/machine-learning/regression/regression/</guid>
      <description>print(&amp;#34;regression&amp;#34;)</description>
    </item>
    
    <item>
      <title>t</title>
      <link>https://tactlabs.github.io/mlnotes/template/t/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/template/t/</guid>
      <description>a = 8a * a 64  </description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://tactlabs.github.io/mlnotes/regex/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/regex/test/</guid>
      <description>print(&amp;#34;Hello world&amp;#34;) Hello world  a = 10</description>
    </item>
    
    <item>
      <title>two</title>
      <link>https://tactlabs.github.io/mlnotes/python/advanced/two/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/python/advanced/two/</guid>
      <description>b = 2b * b 4  </description>
    </item>
    
    <item>
      <title>xyz</title>
      <link>https://tactlabs.github.io/mlnotes/deep-learning/advanced/xyz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/deep-learning/advanced/xyz/</guid>
      <description>print(&amp;#34;xyz&amp;#34;)</description>
    </item>
    
  </channel>
</rss>