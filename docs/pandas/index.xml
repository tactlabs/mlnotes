<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TactLabs</title>
    <link>https://tactlabs.github.io/mlnotes/pandas/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
        <atom:link href="https://tactlabs.github.io/mlnotes/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>add-a-new-column</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/add-a-new-column/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/add-a-new-column/</guid>
      <description>import pandas as pd data = { &amp;#39;city&amp;#39; : [&amp;#39;Toronto&amp;#39;, &amp;#39;Montreal&amp;#39;, &amp;#39;Waterloo&amp;#39;], &amp;#39;points&amp;#39; : [80, 70, 90] } data {&#39;city&#39;: [&#39;Toronto&#39;, &#39;Montreal&#39;, &#39;Waterloo&#39;], &#39;points&#39;: [80, 70, 90]}  type(data) dict  df = pd.DataFrame(data) df = df.assign(code = [1, 2 , 3]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  city points code     0 Toronto 80 1   1 Montreal 70 2   2 Waterloo 90 3     </description>
    </item>
    
    <item>
      <title>advanced-custom-lambda</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/advanced-custom-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/advanced-custom-lambda/</guid>
      <description>import numpy as np import pandas as pd # Check the student passed either math or passed at least in 2 subjects. If no condidition matched, consider them as failed def pass_math_or_two_subjects(row): if(row.maths &amp;gt; 34): return &amp;#39;Pass&amp;#39; if(row.language &amp;gt; 34 and row.science &amp;gt; 34): return &amp;#39;Pass&amp;#39; return &amp;#39;Fail&amp;#39; df = pd.read_csv(&amp;#39;abc.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }</description>
    </item>
    
    <item>
      <title>apply-custom-function</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/apply-custom-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/apply-custom-function/</guid>
      <description>import pandas as pd data = { &amp;#39;city&amp;#39; : [&amp;#39;Toronto&amp;#39;, &amp;#39;Montreal&amp;#39;, &amp;#39;Waterloo&amp;#39;], &amp;#39;points&amp;#39; : [80, 70, 90] } data {&#39;city&#39;: [&#39;Toronto&#39;, &#39;Montreal&#39;, &#39;Waterloo&#39;], &#39;points&#39;: [80, 70, 90]}  type(data) dict  df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  city points     0 Toronto 80   1 Montreal 70   2 Waterloo 90     def get_bonus(x): if (x &amp;gt; 75): return x + 10 return x df[&amp;#39;new_points&amp;#39;] = df[&amp;#39;points&amp;#39;].</description>
    </item>
    
    <item>
      <title>apply-function</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/apply-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/apply-function/</guid>
      <description>import pandas as pd data = { &amp;#39;city&amp;#39; : [&amp;#39;Toronto&amp;#39;, &amp;#39;Montreal&amp;#39;, &amp;#39;Waterloo&amp;#39;, &amp;#39;Toronto&amp;#39;, &amp;#39;Waterloo&amp;#39;, &amp;#39;Toronto&amp;#39;, &amp;#39;Toronto&amp;#39;], &amp;#39;points&amp;#39; : [80, 70, 90, 85, 79, 82, 200] } data {&#39;city&#39;: [&#39;Toronto&#39;, &#39;Montreal&#39;, &#39;Waterloo&#39;, &#39;Toronto&#39;, &#39;Waterloo&#39;, &#39;Toronto&#39;, &#39;Toronto&#39;], &#39;points&#39;: [80, 70, 90, 85, 79, 82, 200]}  type(data) dict  df = pd.DataFrame(data) df.groupby(&amp;#39;city&amp;#39;)[&amp;#39;points&amp;#39;].apply(lambda x:x.rolling(window=1).mean()) 0 80.0 1 70.0 2 90.0 3 85.0 4 79.0 5 82.0 6 200.0 Name: points, dtype: float64  df.</description>
    </item>
    
    <item>
      <title>astype-2</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/astype-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/astype-2/</guid>
      <description>import numpy as np import pandas as pd marks = [ [90, 87], [90, 95], [92, 95] ] marks [[90, 87], [90, 95], [92, 95]]  df = pd.DataFrame(marks, columns=[&amp;#39;maths&amp;#39;, &amp;#39;science&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  maths science     0 90 87   1 90 95   2 92 95     # reassign some values to nan df[&amp;#39;maths&amp;#39;] 0 90 1 90 2 92 Name: maths, dtype: int64  df[&amp;#39;maths&amp;#39;][0] = np.</description>
    </item>
    
    <item>
      <title>categorial-to-numerical</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/categorial-to-numerical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/categorial-to-numerical/</guid>
      <description>import numpy as np import pandas as pd data = { &amp;#39;sam&amp;#39; : [&amp;#39;archery&amp;#39;, &amp;#39;badminton&amp;#39;, &amp;#39;athletics&amp;#39;, &amp;#39;cycling_road&amp;#39;, &amp;#39;canoe_sprint&amp;#39;, &amp;#39;boxing&amp;#39;], &amp;#39;medal&amp;#39; : [&amp;#39;gold&amp;#39;, &amp;#39;silver&amp;#39;, &amp;#39;bronze&amp;#39;, &amp;#39;gold&amp;#39;, &amp;#39;gold&amp;#39;, &amp;#39;silver&amp;#39;] } df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  sam medal     0 archery gold   1 badminton silver   2 athletics bronze   3 cycling_road gold   4 canoe_sprint gold   5 boxing silver     def get_medal_points(medal): if(medal == &amp;#39;gold&amp;#39;): return 10 if(medal == &amp;#39;silver&amp;#39;): return 5 if(medal == &amp;#39;bronze&amp;#39;): return 1 return 0 df[&amp;#39;medal_points&amp;#39;] = df[&amp;#39;medal&amp;#39;].</description>
    </item>
    
    <item>
      <title>change-column-based-on-other-column</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/change-column-based-on-other-column/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/change-column-based-on-other-column/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;marks.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     # Whoever got more than 40 marks in Maths, we will double their marks df.</description>
    </item>
    
    <item>
      <title>check-data-types</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/check-data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/check-data-types/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#34;/Users/snekha/datasets/sales_data_types.csv&amp;#34;) --------------------------------------------------------------------------- FileNotFoundError Traceback (most recent call last) /tmp/ipykernel_6675/3459486513.py in &amp;lt;module&amp;gt; ----&amp;gt; 1 df = pd.read_csv(&amp;quot;/Users/tact/datasets/sales_data_types.csv&amp;quot;) ~/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/io/parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision) 674 ) 675 --&amp;gt; 676 return _read(filepath_or_buffer, kwds) 677 678 parser_f.</description>
    </item>
    
    <item>
      <title>csv-to-dataframe</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/csv-to-dataframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/csv-to-dataframe/</guid>
      <description>import numpy as np import pandas as pd csv = pd.DataFrame.read_csv(&amp;#39;uk-500.csv&amp;#39;) --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) /tmp/ipykernel_5582/2603767424.py in &amp;lt;module&amp;gt; ----&amp;gt; 1 csv = pd.DataFrame.read_csv(&#39;uk-500.csv&#39;) AttributeError: type object &#39;DataFrame&#39; has no attribute &#39;read_csv&#39;  csv = pd.read_csv(&amp;#39;uk-500.csv&amp;#39;) csv.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  first_name last_name company_name address city county postal phone1 phone2 email web     0 Aleshia Tomkiewicz Alan D Rosenburg Cpa Pc 14 Taylor St St.</description>
    </item>
    
    <item>
      <title>custom-function-as-lambda</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/custom-function-as-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/custom-function-as-lambda/</guid>
      <description>import numpy as np import pandas as pd def apply_math_special(row): return (row.maths *2 + (row.language/2) + (row.history/3) + (row.science/4)) df = pd.read_csv(&amp;#39;abc.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     df[&amp;#39;math_special&amp;#39;] = df.</description>
    </item>
    
    <item>
      <title>dataframe-with-random-data</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/dataframe-with-random-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/dataframe-with-random-data/</guid>
      <description>import numpy as np import pandas as pd import random def xrange(x): return iter(range(x)) rnd_1 = [random.randrange(1, 20) for x in xrange(10)] rnd_1 [14, 16, 1, 7, 11, 17, 16, 10, 13, 15]  rnd_2 = [random.randrange(1, 20) for x in xrange(10)] rnd_2 [9, 7, 11, 2, 6, 8, 13, 11, 10, 11]  date = pd.date_range(&amp;#39;2018-01-01&amp;#39;, &amp;#39;2018-01-10&amp;#39;) data = pd.DataFrame({ &amp;#39;date&amp;#39; : date, &amp;#39;rnd_1&amp;#39; : rnd_1, &amp;#39;rnd_2&amp;#39; : rnd_2 }) data  .</description>
    </item>
    
    <item>
      <title>datatype-downcasting</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/datatype-downcasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/datatype-downcasting/</guid>
      <description>import numpy as np import pandas as pd ds = pd.Series([1, np.nan, 3, 4, 5]) ds 0 1.0 1 NaN 2 3.0 3 4.0 4 5.0 dtype: float64  # ds = ds.astype(&amp;#39;int&amp;#39;) # will throw ValueError: Cannot convert non-finite values (NA or inf) to integer ds = ds.astype(&amp;#39;float&amp;#39;) ds 0 1.0 1 NaN 2 3.0 3 4.0 4 5.0 dtype: float64  ds = pd.to_numeric(ds, downcast=&amp;#39;float&amp;#39;) ds 0 1.0 1 NaN 2 3.</description>
    </item>
    
    <item>
      <title>even-rows-and-3-columns</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/even-rows-and-3-columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/even-rows-and-3-columns/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;abc.csv&amp;#39;, sep=&amp;#39;,&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     df_even = df[::2] df_even  .</description>
    </item>
    
    <item>
      <title>fill-na-with-average</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/fill-na-with-average/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/fill-na-with-average/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;abc2.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56.0 34.0 34   1 kevin 10 NaN 32.0 67   2 sammy 90 23.0 12.0 32   3 janice 20 NaN 90.</description>
    </item>
    
    <item>
      <title>fill-random-marks</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/fill-random-marks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/fill-random-marks/</guid>
      <description>import numpy as np import pandas as pd datatype = [(&amp;#39;Science&amp;#39;, &amp;#39;int32&amp;#39;), (&amp;#39;Maths&amp;#39;, &amp;#39;int32&amp;#39;)] current_values = np.zeros(3, dtype=datatype) current_index = [&amp;#39;Row &amp;#39;+str(i) for i in range(1, 4)] df = pd.DataFrame(current_values, index=current_index) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  Science Maths     Row 1 0 0   Row 2 0 0   Row 3 0 0     df[&amp;#39;Science&amp;#39;] Row 1 0 Row 2 0 Row 3 0 Name: Science, dtype: int32  df[&amp;#39;Science&amp;#39;][0] = 45 df[&amp;#39;Maths&amp;#39;][1] = 100 df  .</description>
    </item>
    
    <item>
      <title>filter-between</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/filter-between/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/filter-between/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;marks.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     average_df = df[(df[&amp;#39;maths&amp;#39;] &amp;gt; 40) &amp;amp; (df[&amp;#39;maths&amp;#39;] &amp;lt; 60)] average_df  .</description>
    </item>
    
    <item>
      <title>filter-by-single-column</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/filter-by-single-column/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/filter-by-single-column/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;abc.csv&amp;#39;) df.shape (7, 5)  df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     # We will get the students whoever passed science (considering 50 is the pass mark) df_passed_science = df[df.</description>
    </item>
    
    <item>
      <title>filter-with-query</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/filter-with-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/filter-with-query/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;abc.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     df_passed = df.</description>
    </item>
    
    <item>
      <title>filter-with-value-comparison</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/filter-with-value-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/filter-with-value-comparison/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;abc.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  student language science maths history     0 kumar 90 56 34 34   1 kevin 10 34 32 67   2 sammy 90 23 12 32   3 janice 20 67 90 45   4 peter 30 56 45 65   5 prem 90 45 45 34   6 carrol 50 90 45 23     below_40 = df[df[&amp;#39;science&amp;#39;] &amp;lt; 40] below_40  .</description>
    </item>
    
    <item>
      <title>first-four-rows-csv</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/first-four-rows-csv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/first-four-rows-csv/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;data1.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  capacity score length     0 1 10 30   1 2 20 30   2 3 30 40   3 3 40 30   4 2 30 40   5 7 10 23   6 3 20 22   7 8 20 11   8 2 30 2     df.</description>
    </item>
    
    <item>
      <title>food-points</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/food-points/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/food-points/</guid>
      <description>import numpy as np import pandas as pd data = { &amp;#39;dinner&amp;#39; : [&amp;#39;chicken wrap&amp;#39;, &amp;#39;stake&amp;#39;, &amp;#39;rudy burger&amp;#39;, &amp;#39;sushi&amp;#39;, &amp;#39;chicken teriyaki&amp;#39;, &amp;#39;caesar salad&amp;#39;] } df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  dinner     0 chicken wrap   1 stake   2 rudy burger   3 sushi   4 chicken teriyaki   5 caesar salad     def get_food_points(food): if(&amp;#39;chicken&amp;#39; in food): return 2 if(&amp;#39;stake&amp;#39; in food): return 1 if(&amp;#39;burger&amp;#39; in food): return 1 if(&amp;#39;salad&amp;#39; in food): return 7 return None df[&amp;#39;food_points&amp;#39;] = df[&amp;#39;dinner&amp;#39;].</description>
    </item>
    
    <item>
      <title>get-nth-row</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/get-nth-row/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/get-nth-row/</guid>
      <description>import numpy as np import pandas as pd df = pd.read_csv(&amp;#39;data1.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  capacity score length     0 1 10 30   1 2 20 30   2 3 30 40   3 3 40 30   4 2 30 40   5 7 10 23   6 3 20 22   7 8 20 11   8 2 30 2     df[2:4]  .</description>
    </item>
    
    <item>
      <title>group-by-date</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/group-by-date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/group-by-date/</guid>
      <description>from datetime import datetime import pandas as pd data = { &amp;#39;date&amp;#39; : [ &amp;#39;2019-05-01 19:47:05.069722&amp;#39;, &amp;#39;2019-05-02 17:47:05.069722&amp;#39;, &amp;#39;2019-05-02 19:47:05.069722&amp;#39;, &amp;#39;2019-05-03 18:47:05.069722&amp;#39;, &amp;#39;2019-05-03 19:47:05.069722&amp;#39;, ], &amp;#39;spent&amp;#39; : [ 13, 13, 11, 15, 10 ] } data {&#39;date&#39;: [&#39;2019-05-01 19:47:05.069722&#39;, &#39;2019-05-02 17:47:05.069722&#39;, &#39;2019-05-02 19:47:05.069722&#39;, &#39;2019-05-03 18:47:05.069722&#39;, &#39;2019-05-03 19:47:05.069722&#39;], &#39;spent&#39;: [13, 13, 11, 15, 10]}  df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>if-else-pandas</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/if-else-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/if-else-pandas/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({ &amp;#39;maths&amp;#39; : [80, 89, 90, 20], &amp;#39;science&amp;#39; : [40, 50, 90, 100], &amp;#39;language&amp;#39; : [20, 30, 90, 95] }) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  maths science language     0 80 40 20   1 89 50 30   2 90 90 90   3 20 100 95     df[&amp;#39;masc_pass&amp;#39;] = np.</description>
    </item>
    
    <item>
      <title>if-else-pandas-1</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/if-else-pandas-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/if-else-pandas-1/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({ &amp;#39;maths&amp;#39; : [80, 89, 90, 20], &amp;#39;science&amp;#39; : [40, 50, 90, 100], &amp;#39;language&amp;#39; : [20, 30, 90, 95] }) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  maths science language     0 80 40 20   1 89 50 30   2 90 90 90   3 20 100 95     df.</description>
    </item>
    
    <item>
      <title>if-else-pandas-2</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/if-else-pandas-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/if-else-pandas-2/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({ &amp;#39;maths&amp;#39; : [80, 89, 90, 20], &amp;#39;science&amp;#39; : [40, 50, 90, 100], &amp;#39;language&amp;#39; : [20, 30, 90, 95] }) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  maths science language     0 80 40 20   1 89 50 30   2 90 90 90   3 20 100 95     df_maths = df[df.</description>
    </item>
    
    <item>
      <title>index-isin</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/index-isin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/index-isin/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({ &amp;#39;maths&amp;#39; : [80, 89, 90, 20, 60], &amp;#39;science&amp;#39; : [40, 50, 90, 100, 50], &amp;#39;language&amp;#39; : [20, 30, 90, 95, 40] }) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  maths science language     0 80 40 20   1 89 50 30   2 90 90 90   3 20 100 95   4 60 50 40     df[df.</description>
    </item>
    
    <item>
      <title>infer-objects</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/infer-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/infer-objects/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({&amp;#39;a&amp;#39;: [7, 1, 5], &amp;#39;b&amp;#39;: [&amp;#39;3&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;1&amp;#39;]}, dtype=&amp;#39;object&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  a b     0 7 3   1 1 2   2 5 1     df.dtypes a object b object dtype: object  df = df.</description>
    </item>
    
    <item>
      <title>initialize-with-datatype</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/initialize-with-datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/initialize-with-datatype/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({&amp;#39;a&amp;#39;: [7, 1, 5], &amp;#39;b&amp;#39;: [&amp;#39;3&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;1&amp;#39;]}, dtype=&amp;#39;object&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  a b     0 7 3   1 1 2   2 5 1     df.dtypes a object b object dtype: object  # Let&amp;#39;s set the datatype as integer df1 = pd.</description>
    </item>
    
    <item>
      <title>int-and-nan</title>
      <link>https://tactlabs.github.io/mlnotes/pandas/int-and-nan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tactlabs.github.io/mlnotes/pandas/int-and-nan/</guid>
      <description>import numpy as np import pandas as pd df = pd.DataFrame({ &amp;#39;one&amp;#39;: [4, 5], &amp;#39;two&amp;#39;: [10, 20] }) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  
  one two     0 4 10   1 5 20     df[&amp;#39;one&amp;#39;]+2 0 6 1 7 Name: one, dtype: int64  df[&amp;#39;one&amp;#39;][0] 4  df[&amp;#39;one&amp;#39;][0] = np.</description>
    </item>
    
  </channel>
</rss>